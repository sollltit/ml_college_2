import streamlit as st
from datetime import datetime, time
import pickle
import pandas as pd
import numpy as np
import catboost

# –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏
#model_path = 'model_cb2.pkl'
# –º–æ–¥–µ–ª—å
with open('model_cb2.pkl', 'rb') as file:
    model = pickle.load(file)

# –∑–∞–≥—Ä—É–∑–∫–∞ site.pkl
with open('site.pkl', 'rb') as f:
    link_dict = pickle.load(f)


# —Ç–µ–∫—Å—Ç
st.title('–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ üåê')

st.html("<p><span style='font-size: 22px;'>–ü–æ–≤–µ–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω–æ: –æ–Ω–∏ –ø–æ—Å–µ—â–∞—é—Ç —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ —Å–∞–π—Ç—ã, –ø—Ä–æ—è–≤–ª—è—é—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–∞–∑–ª–∏—á–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫. –ö—Ç–æ-—Ç–æ –º–æ–∂–µ—Ç –∑–∞ –¥–µ–Ω—å –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –¥–µ—Å—è—Ç–∫–∏ —Å–∞–π—Ç–æ–≤ –∏ –ø—Ä–æ–≤–µ—Å—Ç–∏ –Ω–∞ –∫–∞–∂–¥–æ–º —Å–æ–≤—Å–µ–º –º–∞–ª–æ –≤—Ä–µ–º–µ–Ω–∏, –∞ –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –ø–æ–¥–æ–ª–≥—É —Å–∏–¥–µ—Ç—å –Ω–∞ –æ–¥–Ω–æ–º —Å–∞–π—Ç–µ –∏ —Ç—â–∞—Ç–µ–ª—å–Ω–æ –∏–∑—É—á–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ –Ω—ë–º. –¢–∞–∫–æ–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–∏–µ –ø–æ–≤–µ–¥–µ–Ω–∏—è –≤ —Å–µ—Ç–∏ –ø–æ–º–æ–≥–∞–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞, –∞ —Ç–∞–∫ –∂–µ –¥–∞—ë—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, <i>—è–≤–ª—è–µ—Ç—Å—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ—à–µ–Ω–Ω–∏–∫–æ–º –∏–ª–∏ –Ω–µ—Ç</i>.</span></p>")
st.html("<p><span style='font-size: 20px; background-color: #3176A5;'>–°–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –∏—Å—Ç–æ—Ä–∏—é –ø–æ—Å–µ—â–µ–Ω–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –¥–µ—Å—è—Ç–∏ —Å–∞–π—Ç–æ–≤. –í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–π, —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å, –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ª–∏ —ç—Ç–∞ —Å–µ—Å—Å–∏—è –º–æ—à–µ–Ω–Ω–∏–∫—É.</span></p>")
st.html("<p><span style='font-size: 20px;'>–ï—Å–ª–∏ —Å–µ—Å—Å–∏—è —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ–Ω–µ–µ 10-—Ç–∏ —Å–∞–π—Ç–æ–≤, –æ—Å—Ç–∞–≤—å—Ç–µ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–æ–ª—è –≤–≤–æ–¥–∞ –ø—É—Å—Ç—ã–º–∏.</span></p>")
st.markdown('‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ')
st.html("<p><tt><span style='font-size: 24px;'>–í–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–µ—Å—Å–∏–∏: </span></tt></p>")

# —Ç–µ–∫—É—â–∞—è –¥–∞—Ç–∞
date_now = datetime.now().date()

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ —Å—Å—ã–ª–∫–∞ —ç—Ç–æ —Å—Å—ã–ª–∫–∞
#def site_proverka(link):
#    if not (link.startswith("http://") or link.startswith("https://")): return st.error('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É.')

# –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –≤—Ä–µ–º—è –≤–≤–µ–¥–µ–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
def chek_time(time_s):
    try:
        # –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Ç–æ–≥–æ —á—Ç–æ –≤–≤—ë–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö datetime
        input_time = datetime.strptime(time_s, "%H:%M:%S").time()
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏–∞–ø–æ–∑–æ–Ω–∞ –≤—Ä–µ–º–Ω–µ–∏
        
        if input_time < time(0, 0, 0) or input_time > time(23, 59, 59):
            st.error('–û—à–∏–±–∫–∞! –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00:00:00 –¥–æ 23:59:59')
        else: return True
    except ValueError:
        st.error('–û—à–∏–±–∫–∞! –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ "HH:MM:SS" (–ø—Ä–∏–º–µ—Ä: 12:30:15). –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 00:00:00 –¥–æ 23:59:59')


# –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Å—ã–ª–∫–∏
def link_id(url):
    if url != 0:
        if url in link_dict: return link_dict[url]
        # –µ—Å–ª–∏ —Å—Å—ã–ª–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä–µ –Ω–µ—Ç, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë —Ç—É–¥–∞
        new_id = int(max(link_dict.values()) + 1)
        link_dict[url] = new_id
        return new_id
    else: return url


# –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤—ã–≤–∞–µ–º –¥—Ñ —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –º–æ–≥–ª—è –ø—Ä–∏–Ω—è—Ç—å –º–æ–¥–µ–ª—å
def mod_df(df_predict):
    col_site = ['site1', 'site2', 'site3', 'site4', 'site5', 
                'site6', 'site7', 'site8', 'site9', 'site10']
    times_col = ['time1', 'time2', 'time3', 'time4', 'time5',
                  'time6', 'time7', 'time8', 'time9', 'time10']
    df_predict[col_site] = df_predict[col_site].applymap(link_id) 
    # –≤—Ä–µ–º—è
    for i in range(1, 10):
        time_col1 = f'time{i}'
        time_col2 = f'time{i+1}'
        # —Ä–∞–∑–Ω–∏—Ü–∞ –º–µ–∂–¥—É –ø–æ—Å–µ—â–µ–Ω–∏–µ–º
        diff = pd.to_datetime(df_predict[time_col2]) - pd.to_datetime(df_predict[time_col1])
        diff_sec = diff.dt.total_seconds()

        # –µ—Å–ª–∏ –ø—Ä–æ–ø—É—Å–∫, —Ç–æ –∑–∞–ø–æ–ª–Ω—è–µ—Ç—Å—è –Ω—É–ª—ë–º
        diff_sec[df_predict[time_col1].isna() | df_predict[time_col2].isna()] = 0
        # –Ω–æ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞
        df_predict.insert(df_predict.columns.get_loc(time_col1) + 1, f'time_diff{i}', diff_sec)

    df_predict[times_col] = df_predict[times_col].apply(pd.to_datetime)
    for col in times_col:
            df_predict.insert(df_predict.columns.get_loc(col) + 1, f'{col}_evening', (df_predict[col].dt.hour >= 18) & (df_predict[col].dt.hour < 24))
            df_predict.insert(df_predict.columns.get_loc(col) + 1, f'{col}_day', (df_predict[col].dt.hour >= 12) & (df_predict[col].dt.hour < 18))
            df_predict.insert(df_predict.columns.get_loc(col) + 1, f'{col}_morning', (df_predict[col].dt.hour >= 6) & (df_predict[col].dt.hour < 12))
            df_predict.insert(df_predict.columns.get_loc(col) + 1, f'{col}_night', (df_predict[col].dt.hour >= 0) & (df_predict[col].dt.hour < 6))
    
    # –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
    for col in times_col:
        # "+ 1", —á—Ç–æ–±—ã –æ—Ç—Å—á—ë—Ç –±—ã–ª —Å –µ–¥–∏–Ω–∏—Ü—ã (–ø–Ω - 1, –≤—Ç - 2 –∏ —Ç–¥) 
        df_predict.insert(df_predict.columns.get_loc(col) + 1, f'{col}_dayofweek', df_predict[col].dt.dayofweek + 1)

    # –¥–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫–∏ —Å –¥–∞—Ç–æ–π
    for col in times_col:
        # –≥–æ–¥*100+–º–µ—Å—è—Ü, -> 2014*100+20 = 201402 –±—É–¥–µ—Ç –≤ —Å—Ç—Ä–æ–∫–µ
        year_month = (df_predict[col].dt.year * 100 + df_predict[col].dt.month)
        df_predict.insert(df_predict.columns.get_loc(col) + 1, f'{col}_date', year_month)        

    df_predict['time1_date'] = df_predict['time1_date'].astype('int64')
    df_predict['time1_dayofweek'] = df_predict['time1_dayofweek'].astype('int64')
    int_col = ['time2_dayofweek', 'time3_dayofweek', 'time4_dayofweek','time5_dayofweek', 
               'time6_dayofweek', 'time7_dayofweek', 'time8_dayofweek', 'time9_dayofweek', 'time10_dayofweek',
               'time2_date', 'time3_date', 'time4_date', 'time5_date', 'time6_date', 'time7_date', 'time8_date',
               'time9_date', 'time10_date']
    
    df_predict[int_col] = df_predict[int_col].astype('int64')
    bool_cols = ['time1_night', 'time1_day', 'time1_morning', 'time1_evening',
           'time2_night', 'time2_day', 'time2_morning', 'time2_evening',
           'time3_night', 'time3_day', 'time3_morning', 'time3_evening',
           'time4_night', 'time4_day', 'time4_morning', 'time4_evening',
           'time5_night', 'time5_day', 'time5_morning', 'time5_evening',
           'time6_night', 'time6_day', 'time6_morning', 'time6_evening',
           'time7_night', 'time7_day', 'time7_morning', 'time7_evening',
           'time8_night', 'time8_day', 'time8_morning', 'time8_evening',
           'time9_night', 'time9_day', 'time9_morning', 'time9_evening',
           'time10_night', 'time10_day', 'time10_morning', 'time10_evening']
    df_predict[bool_cols] = df_predict[bool_cols].astype('int64')
    
    df_predict = df_predict.drop(columns=['time1', 'time2', 'time3', 'time4', 'time5', 'time6', 'time7', 'time8', 'time9', 'time10'])

    return df_predict

# –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏
def model_predict(model, df_pr):
    predict = model.predict_proba(df_pr)[:, 1]
    predict_rounded = np.round(predict, 3)
    return predict_rounded * 100




# 1—ã–π —Å–∞–π—Ç:
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ1: </span></u></p>")
url1 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li1')
#if url1:site_proverka(url1)
data_s1 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd1')
time_s1 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS', key = 'vr1')
if data_s1 and time_s1: 
    if chek_time(time_s1):
       time_mod1 = datetime.strptime(time_s1, '%H:%M:%S').time()
       datetime_1 = datetime.combine(data_s1, time_mod1)
else:
    time_mod1 = 0
    datetime_1 = 0
st.markdown('-------------------')
# 2–æ–π —Å–∞–π—Ç:
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ2: </span></u></p>")
url2 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li2')
#if url2: site_proverka(url2)
data_s2 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd2')
time_s2 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS', key = 'vr2')
if data_s2 and time_s2:
    if chek_time(time_s2):
      time_mod2 = datetime.strptime(time_s2, '%H:%M:%S').time()
      datetime_2 = datetime.combine(data_s2, time_mod2)
else:
    time_mod2 = 0
    datetime_2 = 0
st.markdown('-------------------')
# 3–∏–π —Å–∞–π—Ç:
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ3: </span></u></p>")
url3 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li3')
#if url3: site_proverka(url3)
data_s3 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd3')
time_s3 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr3')
if data_s3 and time_s3:
    if chek_time(time_s3):
      time_mod3 = datetime.strptime(time_s3, '%H:%M:%S').time()
      datetime_3 = datetime.combine(data_s3, time_mod3)
else:
    time_mod3 = 0
    datetime_3 = 0
st.markdown('-------------------')
# 4—ã–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ4: </span></u></p>")
url4 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li4')
#if url4: site_proverka(url4)
data_s4 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd4')
time_s4 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr4')
if data_s4 and time_s4:
    if chek_time(time_s4):
      time_mod4 = datetime.strptime(time_s4, '%H:%M:%S').time()
      datetime_4 = datetime.combine(data_s4, time_mod4)
else:
    time_mod4 = 0
    datetime_4 = 0
st.markdown('-------------------')
# 5—ã–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ5: </span></u></p>")
url5 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li5')
#if url5: site_proverka(url5)
data_s5 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd5')
time_s5 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr5')
if data_s5 and time_s5:
    if chek_time(time_s5):
        time_mod5 = datetime.strptime(time_s5, '%H:%M:%S').time()
        datetime_5 = datetime.combine(data_s5, time_mod5)
else:
    time_mod5 = 0
    datetime_5 = 0
st.markdown('-------------------')
# 6–æ–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ6: </span></u></p>")
url6 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li6')
#if url6: site_proverka(url6)
data_s6 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd6')
time_s6 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr6')
if data_s6 and time_s6:
    if chek_time(time_s6):
        time_mod6 = datetime.strptime(time_s6, '%H:%M:%S').time()
        datetime_6 = datetime.combine(data_s6, time_mod6)
else:
    time_mod6 = 0
    datetime_6 = 0
st.markdown('-------------------')
# 7–æ–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ7: </span></u></p>")
url7 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li7')
#if url7: site_proverka(url7)
data_s7 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd7')
time_s7 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr7')
if data_s7 and time_s7:
    if chek_time(time_s7):
        time_mod7 = datetime.strptime(time_s7, '%H:%M:%S').time()
        datetime_7 = datetime.combine(data_s7, time_mod7)
else:
    time_mod7 = 0
    datetime_7 = 0
st.markdown('-------------------')
# 8–æ–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ8: </span></u></p>")
url8 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li8')
#if url8: site_proverka(url8)
data_s8 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd8')
time_s8 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr8')
if data_s8 and time_s8:
    if chek_time(time_s8):
        time_mod8 = datetime.strptime(time_s8, '%H:%M:%S').time()
        datetime_8 = datetime.combine(data_s8, time_mod8)
else:
    time_mod8 = 0
    datetime_8 = 0
st.markdown('-------------------')
# 9—ã–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ9: </span></u></p>")
url9 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li9')
#if url9: site_proverka(url9)
data_s9 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd9')
time_s9 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr9')
if data_s9 and time_s9:
    if chek_time(time_s9):
        time_mod9 = datetime.strptime(time_s9, '%H:%M:%S').time()
        datetime_9 = datetime.combine(data_s9, time_mod9)
else:
    time_mod9 = 0
    datetime_9 = 0
st.markdown('-------------------')
# 10—ã–π
st.html("<p><u><span style='font-size: 22px;'>–°–∞–π—Ç ‚Ññ10: </span></u></p>")
url10 = st.text_input('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Å–∞–π—Ç: ', key = 'li10')
#if url10: site_proverka(url10)
data_s10 = st.date_input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –ø–æ—Å–µ—â–µ–Ω–∏—è: ', value=None, min_value=datetime(2000, 1, 1).date(), max_value = date_now, key = 'd10')
time_s10 = st.text_input('–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ', placeholder='HH:MM:SS',key = 'vr10')
if data_s10 and time_s10:
    if chek_time(time_s10):
        time_mod10 = datetime.strptime(time_s10, '%H:%M:%S').time()
        datetime_10 = datetime.combine(data_s10, time_mod10)
else:
    time_mod10 = 0
    datetime_10 = 0
st.markdown('-------------------')

# –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–Ω–æ–ø–∫–∏
st.html(
    """
    <style>
    .stButton > button {
        display: block;
        margin: 0 auto;
        width: 400px;
        height: 60px;
        text-align: center;
        text-decoration: none;
        font-size: 20px;
        border-radius: 12px;
    }
    </style>
    """
)
# –∫–Ω–æ–ø–∫–∞
button = st.button('–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å', type="primary")
if button:
    # –¥—Ñ
    df_dict = {
        'site1': url1,
        'time1': datetime_1,
        'site2': url2,
        'time2': datetime_2,
        'site3': url3,
        'time3': datetime_3,
        'site4': url4,
        'time4': datetime_4,
        'site5': url5,
        'time5': datetime_5,
        'site6': url6,
        'time6': datetime_6,
        'site7': url7,
        'time7': datetime_7,
        'site8': url8,
        'time8': datetime_8,
        'site9': url9,
        'time9': datetime_9,
        'site10': url10,
        'time10': datetime_10,
    }
    
    df_user = pd.DataFrame([df_dict])
    df_user[df_user == ''] = 0
    st.dataframe(df_user)

    df_predict = df_user
    df_predict = mod_df(df_predict)
    # st.dataframe(df_predict)   
    
    predict_val = model_predict(model, df_predict)
    res = np.array2string(predict_val, separator=', ', prefix='', suffix='').strip('[]')
    st.write(f'<p><u><span style="font-size: 26px;">–°–µ—Å—Å–∏—è –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –º–æ—à–µ–Ω–Ω–∏–∫—É —Å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å—é {res}%.</span></u></p>', unsafe_allow_html = True)


